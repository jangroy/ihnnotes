<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="3b6b76f0-bdc9-4a49-b11a-7429bb581b9e" name="Default" comment="">
      <change beforePath="$PROJECT_DIR$/../scrapy/scrapyihn" beforeDir="false" afterPath="$PROJECT_DIR$/../scrapy/scrapyihn" afterDir="false" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file leaf-file-name="core.clj" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/clojure_noob/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="270">
              <caret line="15" lean-forward="true" selection-start-line="15" selection-end-line="15" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/clojure_noob/core.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="65" />
    <option name="y" value="-4" />
    <option name="width" value="1855" />
    <option name="height" value="1084" />
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="clojure-noob" type="b2602c69:ProjectViewProjectNode" />
              <item name="clojure-noob" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="clojure-noob" type="b2602c69:ProjectViewProjectNode" />
              <item name="clojure-noob" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="clojure-noob" type="b2602c69:ProjectViewProjectNode" />
              <item name="clojure-noob" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="clojure_noob" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="AndroidView" />
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../guestbook/project.clj" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.0" />
    <property name="project.structure.side.proportion" value="0.0" />
    <property name="settings.editor.selected.configurable" value="preferences.keymap" />
  </component>
  <component name="ReplState" timestamp="1524859567338">{:repl-history {:ide [], :local [{:command &quot;(main)&quot;, :offset 6, :ns &quot;clojure-noob.core&quot;} {:command &quot;() -main&quot;, :offset 8, :ns &quot;clojure-noob.core&quot;} {:command &quot;(-main)&quot;, :offset 7, :ns &quot;clojure-noob.core&quot;} {:command &quot;(range 3)&quot;, :offset 8, :ns &quot;clojure-noob.core&quot;} {:command &quot;(def a 3)&quot;, :offset 9, :ns &quot;clojure-noob.core&quot;} {:command &quot;(def a (atom 4))&quot;, :offset 16, :ns &quot;clojure-noob.core&quot;} {:command &quot;a&quot;, :offset 1, :ns &quot;clojure-noob.core&quot;} {:command &quot;(swap! a inc)&quot;, :offset 13, :ns &quot;clojure-noob.core&quot;} {:command &quot;(reset! a 5)&quot;, :offset 12, :ns &quot;clojure-noob.core&quot;} {:command &quot;@a&quot;, :offset 2, :ns &quot;clojure-noob.core&quot;} {:command &quot;load-file&quot;, :offset 9, :ns &quot;clojure-noob.core&quot;} {:command &quot;(+ 1 2 3 4)&quot;, :offset 11, :ns &quot;clojure-noob.core&quot;} {:command &quot;(+ 1 (* 2 3) 4)&quot;, :offset 15, :ns &quot;clojure-noob.core&quot;} {:command &quot;(+ 1 |2 3 4)&quot;, :offset 12, :ns &quot;clojure-noob.core&quot;} {:command &quot;1&quot;, :offset 1, :ns &quot;clojure-noob.core&quot;} {:command &quot;\&quot;a string\&quot;&quot;, :offset 10, :ns &quot;clojure-noob.core&quot;} {:command &quot;[\&quot;a\&quot; \&quot;vector\&quot; \&quot;of\&quot; \&quot;strings\&quot;]&quot;, :offset 29, :ns &quot;clojure-noob.core&quot;} {:command &quot;(operator operand1 operand2 ... operandn)&quot;, :offset 41, :ns &quot;clojure-noob.core&quot;} {:command &quot;(if true\n  \&quot;true\&quot;\n  \&quot;false\&quot;\n  \&quot;else\&quot;)&quot;, :offset 37, :ns &quot;clojure-noob.core&quot;} {:command &quot;(if v1\n  \&quot;true\&quot;\n  \&quot;false\&quot;\n  \&quot;else\&quot;)\\&quot;, :offset 36, :ns &quot;clojure-noob.core&quot;} {:command &quot;v1 = (1)&quot;, :offset 8, :ns &quot;clojure-noob.core&quot;} {:command &quot;v1 &quot;, :offset 3, :ns &quot;clojure-noob.core&quot;} {:command &quot;(if true\n  (do (println \&quot;Success!\&quot;)\n      \&quot;By Zeus's hammer!\&quot;)\n  (do (println \&quot;Failure!\&quot;)\n      \&quot;By Aquaman's trident!\&quot;))\n; =&gt; Success!\n; =&gt; \&quot;By Zeus's hammer!\&quot;&quot;, :offset 8} {:command &quot; (if false\n   (do (println \&quot;Success!\&quot;)\n       \&quot;By Zeus's hammer!\&quot;)\n   (do (println \&quot;Failure!\&quot;)\n       \&quot;By Aquaman's trident!\&quot;))\n \n; =&gt; Success!\n; =&gt; \&quot;By Zeus's hammer!\&quot;&quot;, :offset 157, :ns &quot;clojure-noob.core&quot;} {:command &quot;(str inc 1)\n[()]\n[\n {}]\n([DSDKJ])\n{{{} {}}}\n  {}&quot;, :offset 48, :ns &quot;clojure-noob.core&quot;} {:command &quot;(()\n\n\n  []\n  \n  )&quot;, :offset 17, :ns &quot;clojure-noob.core&quot;} {:command &quot;  (true? :smalles)&quot;, :offset 18, :ns &quot;clojure-noob.core&quot;} {:command &quot;  (true? :small)&quot;, :offset 16, :ns &quot;clojure-noob.core&quot;} {:command &quot;  (and :big :no)&quot;, :offset 16, :ns &quot;clojure-noob.core&quot;} {:command &quot;  (or :big :no)\\&quot;, :offset 16, :ns &quot;clojure-noob.core&quot;} {:command &quot;  (or :big :no)&quot;, :offset 15, :ns &quot;clojure-noob.core&quot;} {:command &quot;  (type :big :no)&quot;, :offset 17, :ns &quot;clojure-noob.core&quot;} {:command &quot;  (type :big)&quot;, :offset 13, :ns &quot;clojure-noob.core&quot;} {:command &quot;  (eval :big)&quot;, :offset 13, :ns &quot;clojure-noob.core&quot;} {:command &quot;  (keyword? :big)&quot;, :offset 17, :ns &quot;clojure-noob.core&quot;} {:command &quot;(-&gt;&gt; [1 2 3] \n     (map inc))&quot;, :offset 29, :ns &quot;clojure-noob.core&quot;} {:command &quot;(doseq [x [1 2 3]]\n  (println \&quot;x:\&quot; x))&quot;, :offset 38, :ns &quot;clojure-noob.core&quot;} {:command &quot;(doseq [x '(1 2 3)]\n  (println \&quot;x:\&quot; x))&quot;, :offset 17, :ns &quot;clojure-noob.core&quot;} {:command &quot;(conj [1 3 5] :a)&quot;, :offset 17, :ns &quot;clojure-noob.core&quot;} {:command &quot;(conj '(1 2 3) :a)&quot;, :offset 14, :ns &quot;clojure-noob.core&quot;} {:command &quot;(-&gt;&gt; [1 2 3]\n     (mapv inc))&quot;, :offset 23, :ns &quot;clojure-noob.core&quot;} {:command &quot;(-&gt;&gt; [1 2 3]\n     (map inc))&quot;, :offset 22, :ns &quot;clojure-noob.core&quot;} {:command &quot;(-&gt;&gt; [1 2 3]\n     (map inc)\n     (into []))&quot;, :offset 43, :ns &quot;clojure-noob.core&quot;} {:command &quot;(defn my-fun [x]\n  (inc x))&quot;, :offset 27, :ns &quot;clojure-noob.core&quot;} {:command &quot;(my-fun 5)&quot;, :offset 10, :ns &quot;clojure-noob.core&quot;} {:command &quot;(defn my-fun [x y]\n  (+ x y))&quot;, :offset 29, :ns &quot;clojure-noob.core&quot;} {:command &quot;(my-fun 5 6)&quot;, :offset 12, :ns &quot;clojure-noob.core&quot;} {:command &quot;(1 5 6)&quot;, :offset 2, :ns &quot;clojure-noob.core&quot;} {:command &quot;'(1 5 6)&quot;, :offset 1, :ns &quot;clojure-noob.core&quot;} {:command &quot;(let [x 10\n      l '(1 2 3 x)]\n  l)&quot;, :offset 35, :ns &quot;clojure-noob.core&quot;} {:command &quot;(let [x 10\n      l `(1 2 3 x)]\n  l)&quot;, :offset 20, :ns &quot;clojure-noob.core&quot;} {:command &quot;(let [x 10\n      l `(1 2 3 ~x)]\n  l)&quot;, :offset 28, :ns &quot;clojure-noob.core&quot;} {:command &quot;(let [name \&quot;my name\&quot;]\n  `(:create-user {:name ~name}))&quot;, :offset 54, :ns &quot;clojure-noob.core&quot;} {:command &quot;(identity :a)&quot;, :offset 13, :ns &quot;clojure-noob.core&quot;} {:command &quot;(-&gt;&gt; [1 2] (map identity))&quot;, :offset 26, :ns &quot;clojure-noob.core&quot;} {:command &quot;(-&gt;&gt; {:a \&quot;aval\&quot;\n      :b \&quot;bval\&quot;}\n     (map identity))&quot;, :offset 53, :ns &quot;clojure-noob.core&quot;} {:command &quot;(-&gt;&gt; [[:a \&quot;val\&quot;]\n      [:b \&quot;bval\&quot;]]\n     (into {}))&quot;, :offset 51, :ns &quot;clojure-noob.core&quot;} {:command &quot;(into {} [[:a \&quot;val\&quot;]\n          [:b \&quot;bval\&quot;]])&quot;, :offset 0, :ns &quot;clojure-noob.core&quot;} {:command &quot;(-&gt;&gt; {:a \&quot;aval\&quot; :b \&quot;bval\&quot;}\n     (map identity))&quot;, :offset 47, :ns &quot;clojure-noob.core&quot;} {:command &quot;(-&gt;&gt; {:a \&quot;aval\&quot; :b \&quot;bval\&quot;}\n     (map (fn)))&quot;, :offset 12} {:command &quot;(-&gt;&gt; [1 2 3]\n     (map (fn [x] (inc x))))&quot;, :offset 40, :ns &quot;clojure-noob.core&quot;} {:command &quot;(-&gt;&gt; {:a \&quot;aval\&quot;}\n     (map (fn [[k v]] [k v])))&quot;, :offset 47, :ns &quot;clojure-noob.core&quot;} {:command &quot;(-&gt;&gt; {:a \&quot;aval\&quot;}\n     (map (fn [[k v]] [k v]))\n     (into {}))&quot;, :offset 62, :ns &quot;clojure-noob.core&quot;} {:command &quot;(-&gt;&gt; {:a \&quot;aval\&quot;}\n     (map (fn [[k v]] [k (str \&quot;modified-\&quot; v)]))\n     (into {}))&quot;, :offset 58, :ns &quot;clojure-noob.core&quot;} {:command &quot;(let [a \&quot;a\&quot;\n      b [1 2]\n      [c d] [1 2]])&quot;, :offset 45, :ns &quot;clojure-noob.core&quot;} {:command &quot;#{hash}&quot;, :offset 6, :ns &quot;clojure-noob.core&quot;} {:command &quot;#{\&quot;hash\&quot;}&quot;, :offset 3, :ns &quot;clojure-noob.core&quot;} {:command &quot;#{\&quot;hash\&quot; 1 2 3 4}&quot;, :offset 16, :ns &quot;clojure-noob.core&quot;} {:command &quot;(hash-set \&quot;hash\&quot; 1 2 3 4)&quot;, :offset 10, :ns &quot;clojure-noob.core&quot;} {:command &quot;(hash-set \&quot;hash\&quot; 1 2 3 4) (conj 1)\n&quot;, :offset 34, :ns &quot;clojure-noob.core&quot;} {:command &quot;(conj #{:A 3} 5)&quot;, :offset 15, :ns &quot;clojure-noob.core&quot;} {:command &quot;(conj {\n       :A 3} 5)&quot;, :offset 15, :ns &quot;clojure-noob.core&quot;} {:command &quot;(conj {:A 3} 5)&quot;, :offset 7, :ns &quot;clojure-noob.core&quot;} {:command &quot;(conj (:A 3) 5)&quot;, :offset 13, :ns &quot;clojure-noob.core&quot;} {:command &quot;(conj [:A 3] 5)\n&quot;, :offset 6, :ns &quot;clojure-noob.core&quot;} {:command &quot;(conj (:A 3)\n      5)\n&quot;, :offset 19, :ns &quot;clojure-noob.core&quot;} {:command &quot;(conj (:A 3) 5)\n&quot;, :offset 13, :ns &quot;clojure-noob.core&quot;} {:command &quot;(set [3 3 3 4 4])\n; =&gt; #{3 4}&quot;, :offset 29, :ns &quot;clojure-noob.core&quot;} {:command &quot;(contains? #{:a :b} :a)&quot;, :offset 22, :ns &quot;clojure-noob.core&quot;} {:command &quot;(contains? #{:a :b} :c)&quot;, :offset 22, :ns &quot;clojure-noob.core&quot;} {:command &quot;(contains? #{:a :b} 3\n           )&quot;, :offset 33, :ns &quot;clojure-noob.core&quot;} {:command &quot;(:A #{:A :B})&quot;, :offset 11, :ns &quot;clojure-noob.core&quot;} {:command &quot;(get #{:A} :A)&quot;, :offset 13, :ns &quot;clojure-noob.core&quot;} {:command &quot;((and (= 1 1) +) 1 2 3)&quot;, :offset 23, :ns &quot;clojure-noob.core&quot;} {:command &quot;(= 1 1)&quot;, :offset 6, :ns &quot;clojure-noob.core&quot;} {:command &quot;((first [+ 0]) 1 2 3)&quot;, :offset 21, :ns &quot;clojure-noob.core&quot;} {:command &quot;((first (+ 0)) 1 2 3)&quot;, :offset 21, :ns &quot;clojure-noob.core&quot;} {:command &quot;(map inc [0 1 2 3])&quot;, :offset 17, :ns &quot;clojure-noob.core&quot;} {:command &quot;(-&gt;&gt; [0 1 2 3]\n     (map inc))&quot;, :offset 28, :ns &quot;clojure-noob.core&quot;}], :remote []}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager">
    <configuration default="true" type="Applet" factoryName="Applet">
      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
    </configuration>
    <configuration name="Unnamed" type="ClojureREPL" factoryName="Local">
      <module name="clojure-noob" />
      <setting name="replType" value="1" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="+dev" />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="TEST_OBJECT" value="class" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <patterns />
    </configuration>
    <configuration default="true" type="TestNG" factoryName="TestNG">
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="SUITE_NAME" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="GROUP_NAME" />
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
      <option name="OUTPUT_DIRECTORY" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <option name="USE_DEFAULT_REPORTERS" value="false" />
      <option name="PROPERTIES_FILE" />
      <properties />
      <listeners />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType" factoryName="Plugin">
      <module name="" />
      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
      <option name="PROGRAM_PARAMETERS" />
      <predefined_log_file id="idea.log" enabled="true" />
    </configuration>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="3b6b76f0-bdc9-4a49-b11a-7429bb581b9e" name="Default" comment="" />
      <created>1521754949115</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1521754949115</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="65" y="-4" width="1855" height="1084" extended-state="6" />
    <layout>
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="right" id="Palette&#9;" order="3" />
      <window_info id="Image Layers" order="2" />
      <window_info anchor="right" id="Capture Analysis" order="3" />
      <window_info anchor="bottom" id="Event Log" order="7" side_tool="true" />
      <window_info anchor="right" id="Maven Projects" order="3" />
      <window_info anchor="right" x="992" y="52" width="928" height="1028" id="REPL" order="3" side_tool="true" type="WINDOWED" weight="0.32884097" />
      <window_info anchor="bottom" id="Run" order="2" />
      <window_info anchor="bottom" id="Version Control" order="7" visible="true" weight="0.32991803" />
      <window_info anchor="right" id="Leiningen" order="3" />
      <window_info anchor="bottom" id="Terminal" order="7" />
      <window_info id="Capture Tool" order="2" />
      <window_info id="Designer" order="2" />
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.13854447" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info id="UI Designer" order="2" />
      <window_info anchor="right" id="Theme Preview" order="3" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info id="Favorites" order="2" side_tool="true" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="right" id="Commander" order="0" weight="0.4" />
      <window_info anchor="bottom" id="Find" order="1" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Message" order="0" />
    </layout>
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/clojure_noob/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="75">
          <caret line="5" column="10" lean-forward="true" selection-start-line="5" selection-start-column="10" selection-end-line="5" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_noob/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="105">
          <caret line="7" lean-forward="true" selection-start-line="7" selection-end-line="7" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="162">
          <caret line="9" lean-forward="true" selection-start-line="9" selection-end-line="9" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clojure_noob/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="270">
          <caret line="15" lean-forward="true" selection-start-line="15" selection-end-line="15" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>clojure-noob</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Leiningen: clojure-complete:0.2.4</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>